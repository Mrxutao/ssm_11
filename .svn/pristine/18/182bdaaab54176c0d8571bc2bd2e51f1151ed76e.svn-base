package com.ssm.controller;

import java.sql.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.ui.Model;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.ssm.mapper.UserMapper;
import com.ssm.pojo.User;
import com.ssm.service.UserService;
import com.ssm.util.Constants;
import com.ssm.util.Page;

@Controller
@RequestMapping("/user")
public class UserController {
	private Logger logger = Logger.getLogger(UserController.class);
	@Resource
	private UserService userService;

	/**
	 * 测试ModelAndView
	 */
	@RequestMapping("/index")
	public ModelAndView index(String username) {
		ModelAndView mView = new ModelAndView();
		mView.addObject("username", username);
		mView.setViewName("login");
		return mView;

	}

	/**
	 * 测试Model
	 */
	@RequestMapping("/index2")
	public String index1(String username, Model model) {
		model.addAttribute("username", username);
		User user = new User();
		user.setUserName(username);
		model.addAttribute("user", user);
		return "login";
	}

	@RequestMapping(value = "/login")
	public String login() {
		logger.debug("UserController welcome SMBMS==================");
		return "login";
	}

	/**
	 * 登录验证
	 */
	@RequestMapping("/dologin")
	public String dologin(@RequestParam String userCode, @RequestParam String userPassword, HttpServletRequest request,
			HttpSession session, Model model) {
		User user = userService.login(userCode, userPassword);
		System.err.println(user);
		if (user != null) {
			// 放入session
			session.setAttribute(Constants.USER_SESSION, user);
			model.addAttribute("user", user);
			return "redirect:/user/main.do";
		} else {
			// 页面跳转(login.jsp)带出提示信息---转发
			request.setAttribute("error", "用户名或密码不正确");
			return "login";
		}
	}

	@RequestMapping("/main")
	public String main(HttpSession session) {
		if (session.getAttribute(Constants.USER_SESSION) == null) {
			return "redirect:/user/login.do";
		}
		return "frame";
	}

	/**
	 * 查询所有用户
	 */
	@RequestMapping("/findall")
	public String findall(ModelMap map, Page page) {
		userService.findAll(page);
		map.put("page", page);
		return "userlist";
	}

	/**
	 * 根据id查看
	 */
	@RequestMapping("/finduser")
	public String finduser(Integer id, Model model) {
		User user = userService.get(id);
		model.addAttribute("user", user);
		return "userview";
	}

	/**
	 * 跳转添加用户yemian
	 */
	@RequestMapping("/toUserAdd")
	public String toUserAdd() {
		return "useradd";
	}

	/**
	 * 添加用户数据
	 */
	@RequestMapping("/AddUser")
	public String AddUser(String usercode, String userName, String userPassword, Integer gender, String birthday,
			String phone, String address, Integer userRole, Model model) {
		User user = new User();
		user.setUserCode(usercode);
		user.setUserName(userName);
		user.setUserPassword(userPassword);
		user.setGender(gender);
		user.setBirthday(Date.valueOf(birthday));
		user.setPhone(phone);
		user.setAddress(address);
		user.setUserRole(userRole);
		int i = userService.add(user);
		if (i > 0) {
			model.addAttribute("user", user);
			System.out.println("添加数据成功!");
			return "redirect:/user/finfUserlist3.do";
		}
		return "redirect:/user/finfUserlist3.do";
	}

	/**
	 * 根据id删除用户
	 */
	@RequestMapping("/deluser")
	public String deluser(Integer id, Model model) {
		int userList = userService.del(id);
		model.addAttribute("userList", userList);
		return "redirect:/user/finfUserlist3.do";
	}

	/**
	 * 根据id查看用户
	 */
	@RequestMapping("/toUpdate")
	public String toUpdate(Integer id, Model model) {
		User user = userService.get(id);
		model.addAttribute("user", user);
		return "usermodify";
	}

	/**
	 * 模糊查询
	 */
	@RequestMapping("/findlist")
	public String findlist(String queryname, String queryUserRole, Model model,@RequestParam(name="pn",defaultValue="1")Integer pn) {
		List<User> list = userService.findlist(queryname, queryUserRole);
		PageHelper.startPage(pn, 6);
		PageInfo<User> info = new PageInfo<User>(list,6);
		model.addAttribute("userList", info);
		return "userlist";
	}

	/**
	 * 模糊查询
	 *//*
		 * @RequestMapping("/like") public String like() { return "userlist"; }
		 */
	/**
	 * 查询所有用户数据
	 *//*
		 * @RequestMapping("/findUserAll") public String findUserAll(Model model) {
		 * List<User>userList=userService.findUserAll(); model.addAttribute("userList",
		 * userList); return"userlist"; }
		 */

	/**
	 * 根据id查询用户信息
	 */
	@RequestMapping("/findiduser")
	public String findiduser(Integer id, Model model) {
		User user = userService.get(id);
		model.addAttribute("user", user);
		return "usermodify";
	}

	/**
	 * 修改用户信息
	 */
	@RequestMapping("/userupdate")
	public String userupdate(Integer id, String userName, Integer gender, String birthday, String phone, String address,
			Integer userRole, Model model) {
		User user = new User();
		user.setId(id);
		user.setUserName(userName);
		user.setGender(gender);
		user.setBirthday(Date.valueOf(birthday));
		user.setPhone(phone);
		user.setAddress(address);
		user.setUserRole(userRole);
		int userList = userService.update(user);
		model.addAttribute("userList", userList);
		return "redirect:/user/finfUserlist3.do";
	}

	/**
	 * 跳转修改密码页面
	 */
	@RequestMapping("/rpassword")
	public String rpassword() {
		return "pwdmodify";
	}

	/**
	 * 异常处理
	 */
	@RequestMapping("/exlogin")
	public String exLogin(@RequestParam String userCode, @RequestParam String userPassWord) {
		User user = userService.login(userCode, userPassWord);
		if (user == null) {
			throw new RuntimeException("用户名或者密码不正确!");
		}
		return "redirect:/user/main.do";
	}

	@ExceptionHandler(value = { RuntimeException.class })
	public String handlerException(RuntimeException e, HttpServletRequest req) {
		req.setAttribute("e", e);
		return "error";
	}

	/**
	 * 查询所有用户
	 */
	@RequestMapping("/finfUserlist")
	public String findUserlist(Model model) {
		List<User> userList = userService.findUserAll();
		model.addAttribute("userList", userList);
		return "userlist";
	}
	
	@RequestMapping("/toMainPage")
	public String toMainPage() {
		return "main";
	}
	
	@RequestMapping("fen")
	public String fen() {
		return"main";
	}
	
	/**
	 * 查询所有用户
	 */
	@RequestMapping("/finfUserlist2")
	public String findUserlist2( ModelMap model, @RequestParam(name="pn",defaultValue="1")Integer pn) {
		//调用当前页
		PageHelper.startPage(pn, 5);
		List<User> list = userService.findUserAll( );
		PageInfo<User> info = new PageInfo<User>(list,5);
		model.put("userList", info);
		return "list";
	}
	
	@RequestMapping("/userlist")
	public String userlist() {
		return"userlist";
	}
	/**
	 * 查询所有用户
	 */
	@RequestMapping("/finfUserlist3")
	public String findUserlist3( ModelMap model, @RequestParam(name="pn",defaultValue="1")Integer pn) {
		//调用当前页
		PageHelper.startPage(pn, 8);
		List<User> list = userService.findUserAll( );
		PageInfo<User> info = new PageInfo<User>(list,8);
		model.put("userList", info);
		return "userlist";
	}
	
	/**
	 * 注销
	 */
	@RequestMapping("/logout")
	public String logout(HttpSession session) {
		session.removeAttribute("user");
		return "redirect:/login.jsp";
		
	}
}